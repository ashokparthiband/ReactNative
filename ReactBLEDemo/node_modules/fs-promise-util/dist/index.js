'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var cov_wmfg22soi = function () {
	var path = '/Users/deepakdahal/development/fs-promise-util/src/index.js',
	    hash = '8663a96f1ece1182d3af887001eae312f21180b7',
	    global = new Function('return this')(),
	    gcv = '__coverage__',
	    coverageData = {
		path: '/Users/deepakdahal/development/fs-promise-util/src/index.js',
		statementMap: {
			'0': {
				start: {
					line: 10,
					column: 14
				},
				end: {
					line: 10,
					column: 41
				}
			},
			'1': {
				start: {
					line: 14,
					column: 1
				},
				end: {
					line: 14,
					column: 51
				}
			},
			'2': {
				start: {
					line: 16,
					column: 1
				},
				end: {
					line: 18,
					column: 3
				}
			},
			'3': {
				start: {
					line: 17,
					column: 2
				},
				end: {
					line: 17,
					column: 65
				}
			},
			'4': {
				start: {
					line: 20,
					column: 1
				},
				end: {
					line: 22,
					column: 3
				}
			},
			'5': {
				start: {
					line: 21,
					column: 2
				},
				end: {
					line: 21,
					column: 66
				}
			},
			'6': {
				start: {
					line: 25,
					column: 1
				},
				end: {
					line: 47,
					column: 3
				}
			},
			'7': {
				start: {
					line: 26,
					column: 2
				},
				end: {
					line: 26,
					column: 44
				}
			},
			'8': {
				start: {
					line: 28,
					column: 2
				},
				end: {
					line: 46,
					column: 5
				}
			},
			'9': {
				start: {
					line: 29,
					column: 3
				},
				end: {
					line: 33,
					column: 4
				}
			},
			'10': {
				start: {
					line: 30,
					column: 4
				},
				end: {
					line: 30,
					column: 44
				}
			},
			'11': {
				start: {
					line: 32,
					column: 4
				},
				end: {
					line: 32,
					column: 48
				}
			},
			'12': {
				start: {
					line: 35,
					column: 3
				},
				end: {
					line: 45,
					column: 6
				}
			},
			'13': {
				start: {
					line: 36,
					column: 4
				},
				end: {
					line: 41,
					column: 5
				}
			},
			'14': {
				start: {
					line: 37,
					column: 5
				},
				end: {
					line: 38,
					column: 34
				}
			},
			'15': {
				start: {
					line: 40,
					column: 5
				},
				end: {
					line: 40,
					column: 24
				}
			},
			'16': {
				start: {
					line: 42,
					column: 4
				},
				end: {
					line: 42,
					column: 57
				}
			},
			'17': {
				start: {
					line: 44,
					column: 4
				},
				end: {
					line: 44,
					column: 21
				}
			},
			'18': {
				start: {
					line: 50,
					column: 1
				},
				end: {
					line: 59,
					column: 3
				}
			},
			'19': {
				start: {
					line: 51,
					column: 2
				},
				end: {
					line: 51,
					column: 55
				}
			},
			'20': {
				start: {
					line: 53,
					column: 2
				},
				end: {
					line: 58,
					column: 5
				}
			},
			'21': {
				start: {
					line: 54,
					column: 3
				},
				end: {
					line: 57,
					column: 33
				}
			},
			'22': {
				start: {
					line: 56,
					column: 16
				},
				end: {
					line: 56,
					column: 29
				}
			},
			'23': {
				start: {
					line: 57,
					column: 17
				},
				end: {
					line: 57,
					column: 31
				}
			},
			'24': {
				start: {
					line: 62,
					column: 1
				},
				end: {
					line: 62,
					column: 41
				}
			},
			'25': {
				start: {
					line: 65,
					column: 1
				},
				end: {
					line: 93,
					column: 3
				}
			},
			'26': {
				start: {
					line: 66,
					column: 2
				},
				end: {
					line: 67,
					column: 18
				}
			},
			'27': {
				start: {
					line: 69,
					column: 2
				},
				end: {
					line: 73,
					column: 3
				}
			},
			'28': {
				start: {
					line: 70,
					column: 3
				},
				end: {
					line: 70,
					column: 43
				}
			},
			'29': {
				start: {
					line: 72,
					column: 3
				},
				end: {
					line: 72,
					column: 38
				}
			},
			'30': {
				start: {
					line: 75,
					column: 2
				},
				end: {
					line: 79,
					column: 3
				}
			},
			'31': {
				start: {
					line: 76,
					column: 3
				},
				end: {
					line: 76,
					column: 39
				}
			},
			'32': {
				start: {
					line: 78,
					column: 3
				},
				end: {
					line: 78,
					column: 45
				}
			},
			'33': {
				start: {
					line: 81,
					column: 18
				},
				end: {
					line: 83,
					column: 34
				}
			},
			'34': {
				start: {
					line: 85,
					column: 2
				},
				end: {
					line: 92,
					column: 3
				}
			},
			'35': {
				start: {
					line: 86,
					column: 3
				},
				end: {
					line: 86,
					column: 64
				}
			},
			'36': {
				start: {
					line: 88,
					column: 3
				},
				end: {
					line: 91,
					column: 48
				}
			},
			'37': {
				start: {
					line: 91,
					column: 24
				},
				end: {
					line: 91,
					column: 45
				}
			},
			'38': {
				start: {
					line: 96,
					column: 1
				},
				end: {
					line: 96,
					column: 45
				}
			},
			'39': {
				start: {
					line: 98,
					column: 1
				},
				end: {
					line: 98,
					column: 47
				}
			},
			'40': {
				start: {
					line: 101,
					column: 1
				},
				end: {
					line: 207,
					column: 3
				}
			},
			'41': {
				start: {
					line: 103,
					column: 2
				},
				end: {
					line: 103,
					column: 60
				}
			},
			'42': {
				start: {
					line: 106,
					column: 2
				},
				end: {
					line: 106,
					column: 26
				}
			},
			'43': {
				start: {
					line: 107,
					column: 2
				},
				end: {
					line: 107,
					column: 77
				}
			},
			'44': {
				start: {
					line: 107,
					column: 45
				},
				end: {
					line: 107,
					column: 74
				}
			},
			'45': {
				start: {
					line: 111,
					column: 11
				},
				end: {
					line: 111,
					column: 44
				}
			},
			'46': {
				start: {
					line: 115,
					column: 2
				},
				end: {
					line: 119,
					column: 3
				}
			},
			'47': {
				start: {
					line: 116,
					column: 3
				},
				end: {
					line: 116,
					column: 48
				}
			},
			'48': {
				start: {
					line: 118,
					column: 3
				},
				end: {
					line: 118,
					column: 13
				}
			},
			'49': {
				start: {
					line: 122,
					column: 2
				},
				end: {
					line: 124,
					column: 3
				}
			},
			'50': {
				start: {
					line: 123,
					column: 3
				},
				end: {
					line: 123,
					column: 66
				}
			},
			'51': {
				start: {
					line: 123,
					column: 34
				},
				end: {
					line: 123,
					column: 64
				}
			},
			'52': {
				start: {
					line: 127,
					column: 2
				},
				end: {
					line: 142,
					column: 6
				}
			},
			'53': {
				start: {
					line: 128,
					column: 18
				},
				end: {
					line: 128,
					column: 48
				}
			},
			'54': {
				start: {
					line: 130,
					column: 4
				},
				end: {
					line: 141,
					column: 7
				}
			},
			'55': {
				start: {
					line: 133,
					column: 5
				},
				end: {
					line: 140,
					column: 21
				}
			},
			'56': {
				start: {
					line: 135,
					column: 7
				},
				end: {
					line: 138,
					column: 9
				}
			},
			'57': {
				start: {
					line: 144,
					column: 2
				},
				end: {
					line: 206,
					column: 6
				}
			},
			'58': {
				start: {
					line: 148,
					column: 4
				},
				end: {
					line: 166,
					column: 5
				}
			},
			'59': {
				start: {
					line: 149,
					column: 22
				},
				end: {
					line: 149,
					column: 41
				}
			},
			'60': {
				start: {
					line: 151,
					column: 5
				},
				end: {
					line: 165,
					column: 8
				}
			},
			'61': {
				start: {
					line: 152,
					column: 19
				},
				end: {
					line: 152,
					column: 50
				}
			},
			'62': {
				start: {
					line: 155,
					column: 6
				},
				end: {
					line: 157,
					column: 7
				}
			},
			'63': {
				start: {
					line: 156,
					column: 7
				},
				end: {
					line: 156,
					column: 31
				}
			},
			'64': {
				start: {
					line: 160,
					column: 6
				},
				end: {
					line: 162,
					column: 7
				}
			},
			'65': {
				start: {
					line: 161,
					column: 7
				},
				end: {
					line: 161,
					column: 31
				}
			},
			'66': {
				start: {
					line: 164,
					column: 6
				},
				end: {
					line: 164,
					column: 19
				}
			},
			'67': {
				start: {
					line: 169,
					column: 4
				},
				end: {
					line: 171,
					column: 5
				}
			},
			'68': {
				start: {
					line: 170,
					column: 5
				},
				end: {
					line: 170,
					column: 73
				}
			},
			'69': {
				start: {
					line: 170,
					column: 48
				},
				end: {
					line: 170,
					column: 71
				}
			},
			'70': {
				start: {
					line: 174,
					column: 4
				},
				end: {
					line: 184,
					column: 5
				}
			},
			'71': {
				start: {
					line: 175,
					column: 5
				},
				end: {
					line: 183,
					column: 8
				}
			},
			'72': {
				start: {
					line: 176,
					column: 6
				},
				end: {
					line: 178,
					column: 7
				}
			},
			'73': {
				start: {
					line: 177,
					column: 7
				},
				end: {
					line: 177,
					column: 87
				}
			},
			'74': {
				start: {
					line: 180,
					column: 21
				},
				end: {
					line: 180,
					column: 62
				}
			},
			'75': {
				start: {
					line: 182,
					column: 6
				},
				end: {
					line: 182,
					column: 46
				}
			},
			'76': {
				start: {
					line: 187,
					column: 4
				},
				end: {
					line: 197,
					column: 5
				}
			},
			'77': {
				start: {
					line: 188,
					column: 5
				},
				end: {
					line: 196,
					column: 8
				}
			},
			'78': {
				start: {
					line: 189,
					column: 6
				},
				end: {
					line: 191,
					column: 7
				}
			},
			'79': {
				start: {
					line: 190,
					column: 7
				},
				end: {
					line: 190,
					column: 88
				}
			},
			'80': {
				start: {
					line: 193,
					column: 21
				},
				end: {
					line: 193,
					column: 63
				}
			},
			'81': {
				start: {
					line: 195,
					column: 6
				},
				end: {
					line: 195,
					column: 46
				}
			},
			'82': {
				start: {
					line: 200,
					column: 4
				},
				end: {
					line: 200,
					column: 45
				}
			},
			'83': {
				start: {
					line: 203,
					column: 4
				},
				end: {
					line: 203,
					column: 39
				}
			},
			'84': {
				start: {
					line: 205,
					column: 4
				},
				end: {
					line: 205,
					column: 71
				}
			},
			'85': {
				start: {
					line: 205,
					column: 55
				},
				end: {
					line: 205,
					column: 68
				}
			},
			'86': {
				start: {
					line: 210,
					column: 1
				},
				end: {
					line: 223,
					column: 3
				}
			},
			'87': {
				start: {
					line: 211,
					column: 2
				},
				end: {
					line: 211,
					column: 51
				}
			},
			'88': {
				start: {
					line: 213,
					column: 2
				},
				end: {
					line: 222,
					column: 5
				}
			},
			'89': {
				start: {
					line: 215,
					column: 13
				},
				end: {
					line: 215,
					column: 15
				}
			},
			'90': {
				start: {
					line: 216,
					column: 13
				},
				end: {
					line: 216,
					column: 51
				}
			},
			'91': {
				start: {
					line: 219,
					column: 3
				},
				end: {
					line: 219,
					column: 52
				}
			},
			'92': {
				start: {
					line: 219,
					column: 32
				},
				end: {
					line: 219,
					column: 50
				}
			},
			'93': {
				start: {
					line: 220,
					column: 3
				},
				end: {
					line: 220,
					column: 52
				}
			},
			'94': {
				start: {
					line: 220,
					column: 26
				},
				end: {
					line: 220,
					column: 50
				}
			},
			'95': {
				start: {
					line: 221,
					column: 3
				},
				end: {
					line: 221,
					column: 30
				}
			},
			'96': {
				start: {
					line: 225,
					column: 1
				},
				end: {
					line: 225,
					column: 47
				}
			},
			'97': {
				start: {
					line: 228,
					column: 1
				},
				end: {
					line: 228,
					column: 43
				}
			},
			'98': {
				start: {
					line: 231,
					column: 1
				},
				end: {
					line: 231,
					column: 39
				}
			},
			'99': {
				start: {
					line: 233,
					column: 1
				},
				end: {
					line: 233,
					column: 45
				}
			},
			'100': {
				start: {
					line: 236,
					column: 1
				},
				end: {
					line: 245,
					column: 3
				}
			},
			'101': {
				start: {
					line: 237,
					column: 2
				},
				end: {
					line: 237,
					column: 52
				}
			},
			'102': {
				start: {
					line: 239,
					column: 2
				},
				end: {
					line: 244,
					column: 5
				}
			},
			'103': {
				start: {
					line: 240,
					column: 3
				},
				end: {
					line: 243,
					column: 38
				}
			},
			'104': {
				start: {
					line: 242,
					column: 16
				},
				end: {
					line: 242,
					column: 25
				}
			},
			'105': {
				start: {
					line: 243,
					column: 20
				},
				end: {
					line: 243,
					column: 36
				}
			},
			'106': {
				start: {
					line: 248,
					column: 1
				},
				end: {
					line: 248,
					column: 43
				}
			},
			'107': {
				start: {
					line: 251,
					column: 1
				},
				end: {
					line: 264,
					column: 3
				}
			},
			'108': {
				start: {
					line: 252,
					column: 2
				},
				end: {
					line: 252,
					column: 52
				}
			},
			'109': {
				start: {
					line: 254,
					column: 2
				},
				end: {
					line: 263,
					column: 5
				}
			},
			'110': {
				start: {
					line: 255,
					column: 16
				},
				end: {
					line: 255,
					column: 55
				}
			},
			'111': {
				start: {
					line: 258,
					column: 3
				},
				end: {
					line: 258,
					column: 30
				}
			},
			'112': {
				start: {
					line: 259,
					column: 3
				},
				end: {
					line: 259,
					column: 32
				}
			},
			'113': {
				start: {
					line: 262,
					column: 3
				},
				end: {
					line: 262,
					column: 20
				}
			},
			'114': {
				start: {
					line: 266,
					column: 1
				},
				end: {
					line: 266,
					column: 13
				}
			}
		},
		fnMap: {
			'0': {
				name: '(anonymous_0)',
				decl: {
					start: {
						line: 12,
						column: 16
					},
					end: {
						line: 12,
						column: 17
					}
				},
				loc: {
					start: {
						line: 12,
						column: 26
					},
					end: {
						line: 267,
						column: 1
					}
				},
				line: 12
			},
			'1': {
				name: '(anonymous_1)',
				decl: {
					start: {
						line: 16,
						column: 25
					},
					end: {
						line: 16,
						column: 26
					}
				},
				loc: {
					start: {
						line: 16,
						column: 48
					},
					end: {
						line: 18,
						column: 2
					}
				},
				line: 16
			},
			'2': {
				name: '(anonymous_2)',
				decl: {
					start: {
						line: 20,
						column: 26
					},
					end: {
						line: 20,
						column: 27
					}
				},
				loc: {
					start: {
						line: 20,
						column: 49
					},
					end: {
						line: 22,
						column: 2
					}
				},
				line: 20
			},
			'3': {
				name: '(anonymous_3)',
				decl: {
					start: {
						line: 25,
						column: 19
					},
					end: {
						line: 25,
						column: 20
					}
				},
				loc: {
					start: {
						line: 25,
						column: 38
					},
					end: {
						line: 47,
						column: 2
					}
				},
				line: 25
			},
			'4': {
				name: '(anonymous_4)',
				decl: {
					start: {
						line: 28,
						column: 21
					},
					end: {
						line: 28,
						column: 22
					}
				},
				loc: {
					start: {
						line: 28,
						column: 42
					},
					end: {
						line: 46,
						column: 3
					}
				},
				line: 28
			},
			'5': {
				name: '(anonymous_5)',
				decl: {
					start: {
						line: 35,
						column: 32
					},
					end: {
						line: 35,
						column: 33
					}
				},
				loc: {
					start: {
						line: 35,
						column: 41
					},
					end: {
						line: 45,
						column: 4
					}
				},
				line: 35
			},
			'6': {
				name: '(anonymous_6)',
				decl: {
					start: {
						line: 50,
						column: 15
					},
					end: {
						line: 50,
						column: 16
					}
				},
				loc: {
					start: {
						line: 50,
						column: 29
					},
					end: {
						line: 59,
						column: 2
					}
				},
				line: 50
			},
			'7': {
				name: '(anonymous_7)',
				decl: {
					start: {
						line: 53,
						column: 21
					},
					end: {
						line: 53,
						column: 22
					}
				},
				loc: {
					start: {
						line: 53,
						column: 34
					},
					end: {
						line: 58,
						column: 3
					}
				},
				line: 53
			},
			'8': {
				name: '(anonymous_8)',
				decl: {
					start: {
						line: 56,
						column: 10
					},
					end: {
						line: 56,
						column: 11
					}
				},
				loc: {
					start: {
						line: 56,
						column: 16
					},
					end: {
						line: 56,
						column: 29
					}
				},
				line: 56
			},
			'9': {
				name: '(anonymous_9)',
				decl: {
					start: {
						line: 57,
						column: 11
					},
					end: {
						line: 57,
						column: 12
					}
				},
				loc: {
					start: {
						line: 57,
						column: 17
					},
					end: {
						line: 57,
						column: 31
					}
				},
				line: 57
			},
			'10': {
				name: '(anonymous_10)',
				decl: {
					start: {
						line: 65,
						column: 14
					},
					end: {
						line: 65,
						column: 15
					}
				},
				loc: {
					start: {
						line: 65,
						column: 60
					},
					end: {
						line: 93,
						column: 2
					}
				},
				line: 65
			},
			'11': {
				name: '(anonymous_11)',
				decl: {
					start: {
						line: 91,
						column: 10
					},
					end: {
						line: 91,
						column: 11
					}
				},
				loc: {
					start: {
						line: 91,
						column: 24
					},
					end: {
						line: 91,
						column: 45
					}
				},
				line: 91
			},
			'12': {
				name: '(anonymous_12)',
				decl: {
					start: {
						line: 101,
						column: 20
					},
					end: {
						line: 101,
						column: 21
					}
				},
				loc: {
					start: {
						line: 101,
						column: 54
					},
					end: {
						line: 207,
						column: 2
					}
				},
				line: 101
			},
			'13': {
				name: '(anonymous_13)',
				decl: {
					start: {
						line: 107,
						column: 35
					},
					end: {
						line: 107,
						column: 36
					}
				},
				loc: {
					start: {
						line: 107,
						column: 45
					},
					end: {
						line: 107,
						column: 74
					}
				},
				line: 107
			},
			'14': {
				name: '(anonymous_14)',
				decl: {
					start: {
						line: 123,
						column: 24
					},
					end: {
						line: 123,
						column: 25
					}
				},
				loc: {
					start: {
						line: 123,
						column: 34
					},
					end: {
						line: 123,
						column: 64
					}
				},
				line: 123
			},
			'15': {
				name: '(anonymous_15)',
				decl: {
					start: {
						line: 128,
						column: 8
					},
					end: {
						line: 128,
						column: 9
					}
				},
				loc: {
					start: {
						line: 128,
						column: 18
					},
					end: {
						line: 128,
						column: 48
					}
				},
				line: 128
			},
			'16': {
				name: '(anonymous_16)',
				decl: {
					start: {
						line: 129,
						column: 8
					},
					end: {
						line: 129,
						column: 9
					}
				},
				loc: {
					start: {
						line: 129,
						column: 22
					},
					end: {
						line: 142,
						column: 4
					}
				},
				line: 129
			},
			'17': {
				name: '(anonymous_17)',
				decl: {
					start: {
						line: 130,
						column: 23
					},
					end: {
						line: 130,
						column: 24
					}
				},
				loc: {
					start: {
						line: 130,
						column: 44
					},
					end: {
						line: 141,
						column: 5
					}
				},
				line: 130
			},
			'18': {
				name: '(anonymous_18)',
				decl: {
					start: {
						line: 134,
						column: 12
					},
					end: {
						line: 134,
						column: 13
					}
				},
				loc: {
					start: {
						line: 135,
						column: 7
					},
					end: {
						line: 138,
						column: 9
					}
				},
				line: 135
			},
			'19': {
				name: '(anonymous_19)',
				decl: {
					start: {
						line: 146,
						column: 9
					},
					end: {
						line: 146,
						column: 10
					}
				},
				loc: {
					start: {
						line: 146,
						column: 24
					},
					end: {
						line: 206,
						column: 4
					}
				},
				line: 146
			},
			'20': {
				name: '(anonymous_20)',
				decl: {
					start: {
						line: 151,
						column: 34
					},
					end: {
						line: 151,
						column: 35
					}
				},
				loc: {
					start: {
						line: 151,
						column: 48
					},
					end: {
						line: 165,
						column: 6
					}
				},
				line: 151
			},
			'21': {
				name: '(anonymous_21)',
				decl: {
					start: {
						line: 170,
						column: 34
					},
					end: {
						line: 170,
						column: 35
					}
				},
				loc: {
					start: {
						line: 170,
						column: 48
					},
					end: {
						line: 170,
						column: 71
					}
				},
				line: 170
			},
			'22': {
				name: '(anonymous_22)',
				decl: {
					start: {
						line: 175,
						column: 34
					},
					end: {
						line: 175,
						column: 35
					}
				},
				loc: {
					start: {
						line: 175,
						column: 48
					},
					end: {
						line: 183,
						column: 6
					}
				},
				line: 175
			},
			'23': {
				name: '(anonymous_23)',
				decl: {
					start: {
						line: 188,
						column: 34
					},
					end: {
						line: 188,
						column: 35
					}
				},
				loc: {
					start: {
						line: 188,
						column: 48
					},
					end: {
						line: 196,
						column: 6
					}
				},
				line: 188
			},
			'24': {
				name: '(anonymous_24)',
				decl: {
					start: {
						line: 205,
						column: 41
					},
					end: {
						line: 205,
						column: 42
					}
				},
				loc: {
					start: {
						line: 205,
						column: 55
					},
					end: {
						line: 205,
						column: 68
					}
				},
				line: 205
			},
			'25': {
				name: '(anonymous_25)',
				decl: {
					start: {
						line: 210,
						column: 17
					},
					end: {
						line: 210,
						column: 18
					}
				},
				loc: {
					start: {
						line: 210,
						column: 40
					},
					end: {
						line: 223,
						column: 2
					}
				},
				line: 210
			},
			'26': {
				name: '(anonymous_26)',
				decl: {
					start: {
						line: 213,
						column: 21
					},
					end: {
						line: 213,
						column: 22
					}
				},
				loc: {
					start: {
						line: 213,
						column: 42
					},
					end: {
						line: 222,
						column: 3
					}
				},
				line: 213
			},
			'27': {
				name: '(anonymous_27)',
				decl: {
					start: {
						line: 219,
						column: 21
					},
					end: {
						line: 219,
						column: 22
					}
				},
				loc: {
					start: {
						line: 219,
						column: 32
					},
					end: {
						line: 219,
						column: 50
					}
				},
				line: 219
			},
			'28': {
				name: '(anonymous_28)',
				decl: {
					start: {
						line: 220,
						column: 20
					},
					end: {
						line: 220,
						column: 21
					}
				},
				loc: {
					start: {
						line: 220,
						column: 26
					},
					end: {
						line: 220,
						column: 50
					}
				},
				line: 220
			},
			'29': {
				name: '(anonymous_29)',
				decl: {
					start: {
						line: 236,
						column: 21
					},
					end: {
						line: 236,
						column: 22
					}
				},
				loc: {
					start: {
						line: 236,
						column: 50
					},
					end: {
						line: 245,
						column: 2
					}
				},
				line: 236
			},
			'30': {
				name: '(anonymous_30)',
				decl: {
					start: {
						line: 239,
						column: 21
					},
					end: {
						line: 239,
						column: 22
					}
				},
				loc: {
					start: {
						line: 239,
						column: 34
					},
					end: {
						line: 244,
						column: 3
					}
				},
				line: 239
			},
			'31': {
				name: '(anonymous_31)',
				decl: {
					start: {
						line: 242,
						column: 10
					},
					end: {
						line: 242,
						column: 11
					}
				},
				loc: {
					start: {
						line: 242,
						column: 16
					},
					end: {
						line: 242,
						column: 25
					}
				},
				line: 242
			},
			'32': {
				name: '(anonymous_32)',
				decl: {
					start: {
						line: 243,
						column: 11
					},
					end: {
						line: 243,
						column: 12
					}
				},
				loc: {
					start: {
						line: 243,
						column: 20
					},
					end: {
						line: 243,
						column: 36
					}
				},
				line: 243
			},
			'33': {
				name: '(anonymous_33)',
				decl: {
					start: {
						line: 251,
						column: 18
					},
					end: {
						line: 251,
						column: 19
					}
				},
				loc: {
					start: {
						line: 251,
						column: 47
					},
					end: {
						line: 264,
						column: 2
					}
				},
				line: 251
			},
			'34': {
				name: '(anonymous_34)',
				decl: {
					start: {
						line: 254,
						column: 21
					},
					end: {
						line: 254,
						column: 22
					}
				},
				loc: {
					start: {
						line: 254,
						column: 42
					},
					end: {
						line: 263,
						column: 3
					}
				},
				line: 254
			}
		},
		branchMap: {
			'0': {
				loc: {
					start: {
						line: 29,
						column: 3
					},
					end: {
						line: 33,
						column: 4
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 29,
						column: 3
					},
					end: {
						line: 33,
						column: 4
					}
				}, {
					start: {
						line: 29,
						column: 3
					},
					end: {
						line: 33,
						column: 4
					}
				}],
				line: 29
			},
			'1': {
				loc: {
					start: {
						line: 29,
						column: 7
					},
					end: {
						line: 29,
						column: 65
					}
				},
				type: 'binary-expr',
				locations: [{
					start: {
						line: 29,
						column: 7
					},
					end: {
						line: 29,
						column: 40
					}
				}, {
					start: {
						line: 29,
						column: 44
					},
					end: {
						line: 29,
						column: 65
					}
				}],
				line: 29
			},
			'2': {
				loc: {
					start: {
						line: 36,
						column: 4
					},
					end: {
						line: 41,
						column: 5
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 36,
						column: 4
					},
					end: {
						line: 41,
						column: 5
					}
				}, {
					start: {
						line: 36,
						column: 4
					},
					end: {
						line: 41,
						column: 5
					}
				}],
				line: 36
			},
			'3': {
				loc: {
					start: {
						line: 69,
						column: 2
					},
					end: {
						line: 73,
						column: 3
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 69,
						column: 2
					},
					end: {
						line: 73,
						column: 3
					}
				}, {
					start: {
						line: 69,
						column: 2
					},
					end: {
						line: 73,
						column: 3
					}
				}],
				line: 69
			},
			'4': {
				loc: {
					start: {
						line: 69,
						column: 6
					},
					end: {
						line: 69,
						column: 64
					}
				},
				type: 'binary-expr',
				locations: [{
					start: {
						line: 69,
						column: 6
					},
					end: {
						line: 69,
						column: 39
					}
				}, {
					start: {
						line: 69,
						column: 43
					},
					end: {
						line: 69,
						column: 64
					}
				}],
				line: 69
			},
			'5': {
				loc: {
					start: {
						line: 75,
						column: 2
					},
					end: {
						line: 79,
						column: 3
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 75,
						column: 2
					},
					end: {
						line: 79,
						column: 3
					}
				}, {
					start: {
						line: 75,
						column: 2
					},
					end: {
						line: 79,
						column: 3
					}
				}],
				line: 75
			},
			'6': {
				loc: {
					start: {
						line: 75,
						column: 6
					},
					end: {
						line: 75,
						column: 56
					}
				},
				type: 'binary-expr',
				locations: [{
					start: {
						line: 75,
						column: 6
					},
					end: {
						line: 75,
						column: 37
					}
				}, {
					start: {
						line: 75,
						column: 41
					},
					end: {
						line: 75,
						column: 56
					}
				}],
				line: 75
			},
			'7': {
				loc: {
					start: {
						line: 85,
						column: 2
					},
					end: {
						line: 92,
						column: 3
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 85,
						column: 2
					},
					end: {
						line: 92,
						column: 3
					}
				}, {
					start: {
						line: 85,
						column: 2
					},
					end: {
						line: 92,
						column: 3
					}
				}],
				line: 85
			},
			'8': {
				loc: {
					start: {
						line: 106,
						column: 12
					},
					end: {
						line: 106,
						column: 25
					}
				},
				type: 'binary-expr',
				locations: [{
					start: {
						line: 106,
						column: 12
					},
					end: {
						line: 106,
						column: 19
					}
				}, {
					start: {
						line: 106,
						column: 23
					},
					end: {
						line: 106,
						column: 25
					}
				}],
				line: 106
			},
			'9': {
				loc: {
					start: {
						line: 107,
						column: 18
					},
					end: {
						line: 107,
						column: 75
					}
				},
				type: 'binary-expr',
				locations: [{
					start: {
						line: 107,
						column: 18
					},
					end: {
						line: 107,
						column: 30
					}
				}, {
					start: {
						line: 107,
						column: 35
					},
					end: {
						line: 107,
						column: 74
					}
				}],
				line: 107
			},
			'10': {
				loc: {
					start: {
						line: 115,
						column: 2
					},
					end: {
						line: 119,
						column: 3
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 115,
						column: 2
					},
					end: {
						line: 119,
						column: 3
					}
				}, {
					start: {
						line: 115,
						column: 2
					},
					end: {
						line: 119,
						column: 3
					}
				}],
				line: 115
			},
			'11': {
				loc: {
					start: {
						line: 122,
						column: 2
					},
					end: {
						line: 124,
						column: 3
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 122,
						column: 2
					},
					end: {
						line: 124,
						column: 3
					}
				}, {
					start: {
						line: 122,
						column: 2
					},
					end: {
						line: 124,
						column: 3
					}
				}],
				line: 122
			},
			'12': {
				loc: {
					start: {
						line: 122,
						column: 6
					},
					end: {
						line: 122,
						column: 43
					}
				},
				type: 'binary-expr',
				locations: [{
					start: {
						line: 122,
						column: 6
					},
					end: {
						line: 122,
						column: 20
					}
				}, {
					start: {
						line: 122,
						column: 24
					},
					end: {
						line: 122,
						column: 43
					}
				}],
				line: 122
			},
			'13': {
				loc: {
					start: {
						line: 148,
						column: 4
					},
					end: {
						line: 166,
						column: 5
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 148,
						column: 4
					},
					end: {
						line: 166,
						column: 5
					}
				}, {
					start: {
						line: 148,
						column: 4
					},
					end: {
						line: 166,
						column: 5
					}
				}],
				line: 148
			},
			'14': {
				loc: {
					start: {
						line: 148,
						column: 8
					},
					end: {
						line: 148,
						column: 45
					}
				},
				type: 'binary-expr',
				locations: [{
					start: {
						line: 148,
						column: 8
					},
					end: {
						line: 148,
						column: 22
					}
				}, {
					start: {
						line: 148,
						column: 26
					},
					end: {
						line: 148,
						column: 45
					}
				}],
				line: 148
			},
			'15': {
				loc: {
					start: {
						line: 155,
						column: 6
					},
					end: {
						line: 157,
						column: 7
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 155,
						column: 6
					},
					end: {
						line: 157,
						column: 7
					}
				}, {
					start: {
						line: 155,
						column: 6
					},
					end: {
						line: 157,
						column: 7
					}
				}],
				line: 155
			},
			'16': {
				loc: {
					start: {
						line: 155,
						column: 10
					},
					end: {
						line: 155,
						column: 45
					}
				},
				type: 'binary-expr',
				locations: [{
					start: {
						line: 155,
						column: 10
					},
					end: {
						line: 155,
						column: 35
					}
				}, {
					start: {
						line: 155,
						column: 39
					},
					end: {
						line: 155,
						column: 45
					}
				}],
				line: 155
			},
			'17': {
				loc: {
					start: {
						line: 160,
						column: 6
					},
					end: {
						line: 162,
						column: 7
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 160,
						column: 6
					},
					end: {
						line: 162,
						column: 7
					}
				}, {
					start: {
						line: 160,
						column: 6
					},
					end: {
						line: 162,
						column: 7
					}
				}],
				line: 160
			},
			'18': {
				loc: {
					start: {
						line: 160,
						column: 10
					},
					end: {
						line: 160,
						column: 46
					}
				},
				type: 'binary-expr',
				locations: [{
					start: {
						line: 160,
						column: 10
					},
					end: {
						line: 160,
						column: 35
					}
				}, {
					start: {
						line: 160,
						column: 39
					},
					end: {
						line: 160,
						column: 46
					}
				}],
				line: 160
			},
			'19': {
				loc: {
					start: {
						line: 169,
						column: 4
					},
					end: {
						line: 171,
						column: 5
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 169,
						column: 4
					},
					end: {
						line: 171,
						column: 5
					}
				}, {
					start: {
						line: 169,
						column: 4
					},
					end: {
						line: 171,
						column: 5
					}
				}],
				line: 169
			},
			'20': {
				loc: {
					start: {
						line: 169,
						column: 8
					},
					end: {
						line: 169,
						column: 49
					}
				},
				type: 'binary-expr',
				locations: [{
					start: {
						line: 169,
						column: 8
					},
					end: {
						line: 169,
						column: 22
					}
				}, {
					start: {
						line: 169,
						column: 26
					},
					end: {
						line: 169,
						column: 49
					}
				}],
				line: 169
			},
			'21': {
				loc: {
					start: {
						line: 174,
						column: 4
					},
					end: {
						line: 184,
						column: 5
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 174,
						column: 4
					},
					end: {
						line: 184,
						column: 5
					}
				}, {
					start: {
						line: 174,
						column: 4
					},
					end: {
						line: 184,
						column: 5
					}
				}],
				line: 174
			},
			'22': {
				loc: {
					start: {
						line: 174,
						column: 8
					},
					end: {
						line: 174,
						column: 54
					}
				},
				type: 'binary-expr',
				locations: [{
					start: {
						line: 174,
						column: 8
					},
					end: {
						line: 174,
						column: 22
					}
				}, {
					start: {
						line: 174,
						column: 26
					},
					end: {
						line: 174,
						column: 54
					}
				}],
				line: 174
			},
			'23': {
				loc: {
					start: {
						line: 176,
						column: 6
					},
					end: {
						line: 178,
						column: 7
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 176,
						column: 6
					},
					end: {
						line: 178,
						column: 7
					}
				}, {
					start: {
						line: 176,
						column: 6
					},
					end: {
						line: 178,
						column: 7
					}
				}],
				line: 176
			},
			'24': {
				loc: {
					start: {
						line: 187,
						column: 4
					},
					end: {
						line: 197,
						column: 5
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 187,
						column: 4
					},
					end: {
						line: 197,
						column: 5
					}
				}, {
					start: {
						line: 187,
						column: 4
					},
					end: {
						line: 197,
						column: 5
					}
				}],
				line: 187
			},
			'25': {
				loc: {
					start: {
						line: 187,
						column: 8
					},
					end: {
						line: 187,
						column: 55
					}
				},
				type: 'binary-expr',
				locations: [{
					start: {
						line: 187,
						column: 8
					},
					end: {
						line: 187,
						column: 22
					}
				}, {
					start: {
						line: 187,
						column: 26
					},
					end: {
						line: 187,
						column: 55
					}
				}],
				line: 187
			},
			'26': {
				loc: {
					start: {
						line: 189,
						column: 6
					},
					end: {
						line: 191,
						column: 7
					}
				},
				type: 'if',
				locations: [{
					start: {
						line: 189,
						column: 6
					},
					end: {
						line: 191,
						column: 7
					}
				}, {
					start: {
						line: 189,
						column: 6
					},
					end: {
						line: 191,
						column: 7
					}
				}],
				line: 189
			}
		},
		s: {
			'0': 0,
			'1': 0,
			'2': 0,
			'3': 0,
			'4': 0,
			'5': 0,
			'6': 0,
			'7': 0,
			'8': 0,
			'9': 0,
			'10': 0,
			'11': 0,
			'12': 0,
			'13': 0,
			'14': 0,
			'15': 0,
			'16': 0,
			'17': 0,
			'18': 0,
			'19': 0,
			'20': 0,
			'21': 0,
			'22': 0,
			'23': 0,
			'24': 0,
			'25': 0,
			'26': 0,
			'27': 0,
			'28': 0,
			'29': 0,
			'30': 0,
			'31': 0,
			'32': 0,
			'33': 0,
			'34': 0,
			'35': 0,
			'36': 0,
			'37': 0,
			'38': 0,
			'39': 0,
			'40': 0,
			'41': 0,
			'42': 0,
			'43': 0,
			'44': 0,
			'45': 0,
			'46': 0,
			'47': 0,
			'48': 0,
			'49': 0,
			'50': 0,
			'51': 0,
			'52': 0,
			'53': 0,
			'54': 0,
			'55': 0,
			'56': 0,
			'57': 0,
			'58': 0,
			'59': 0,
			'60': 0,
			'61': 0,
			'62': 0,
			'63': 0,
			'64': 0,
			'65': 0,
			'66': 0,
			'67': 0,
			'68': 0,
			'69': 0,
			'70': 0,
			'71': 0,
			'72': 0,
			'73': 0,
			'74': 0,
			'75': 0,
			'76': 0,
			'77': 0,
			'78': 0,
			'79': 0,
			'80': 0,
			'81': 0,
			'82': 0,
			'83': 0,
			'84': 0,
			'85': 0,
			'86': 0,
			'87': 0,
			'88': 0,
			'89': 0,
			'90': 0,
			'91': 0,
			'92': 0,
			'93': 0,
			'94': 0,
			'95': 0,
			'96': 0,
			'97': 0,
			'98': 0,
			'99': 0,
			'100': 0,
			'101': 0,
			'102': 0,
			'103': 0,
			'104': 0,
			'105': 0,
			'106': 0,
			'107': 0,
			'108': 0,
			'109': 0,
			'110': 0,
			'111': 0,
			'112': 0,
			'113': 0,
			'114': 0
		},
		f: {
			'0': 0,
			'1': 0,
			'2': 0,
			'3': 0,
			'4': 0,
			'5': 0,
			'6': 0,
			'7': 0,
			'8': 0,
			'9': 0,
			'10': 0,
			'11': 0,
			'12': 0,
			'13': 0,
			'14': 0,
			'15': 0,
			'16': 0,
			'17': 0,
			'18': 0,
			'19': 0,
			'20': 0,
			'21': 0,
			'22': 0,
			'23': 0,
			'24': 0,
			'25': 0,
			'26': 0,
			'27': 0,
			'28': 0,
			'29': 0,
			'30': 0,
			'31': 0,
			'32': 0,
			'33': 0,
			'34': 0
		},
		b: {
			'0': [0, 0],
			'1': [0, 0],
			'2': [0, 0],
			'3': [0, 0],
			'4': [0, 0],
			'5': [0, 0],
			'6': [0, 0],
			'7': [0, 0],
			'8': [0, 0],
			'9': [0, 0],
			'10': [0, 0],
			'11': [0, 0],
			'12': [0, 0],
			'13': [0, 0],
			'14': [0, 0],
			'15': [0, 0],
			'16': [0, 0],
			'17': [0, 0],
			'18': [0, 0],
			'19': [0, 0],
			'20': [0, 0],
			'21': [0, 0],
			'22': [0, 0],
			'23': [0, 0],
			'24': [0, 0],
			'25': [0, 0],
			'26': [0, 0]
		},
		_coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
	},
	    coverage = global[gcv] || (global[gcv] = {});

	if (coverage[path] && coverage[path].hash === hash) {
		return coverage[path];
	}

	coverageData.hash = hash;
	return coverage[path] = coverageData;
}();

require('babel-polyfill');

require('source-map-support/register');

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _gracefulFs = require('graceful-fs');

var _gracefulFs2 = _interopRequireDefault(_gracefulFs);

var _mkdirp = require('mkdirp');

var _mkdirp2 = _interopRequireDefault(_mkdirp);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _renege = require('renege');

var _renege2 = _interopRequireDefault(_renege);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var debug = (cov_wmfg22soi.s[0]++, (0, _debug2.default)('fs-promise-util'));

exports.default = function (self) {
	cov_wmfg22soi.f[0]++;
	cov_wmfg22soi.s[1]++;

	// Promise for fs.appendFile
	self.appendFile = _renege2.default.promisify(_gracefulFs2.default.appendFile);

	cov_wmfg22soi.s[2]++;
	self.createReadStream = function (filePath, options) {
		cov_wmfg22soi.f[1]++;
		cov_wmfg22soi.s[3]++;

		return Promise.resolve(_gracefulFs2.default.createReadStream(filePath, options));
	};

	cov_wmfg22soi.s[4]++;
	self.createWriteStream = function (filePath, options) {
		cov_wmfg22soi.f[2]++;
		cov_wmfg22soi.s[5]++;

		return Promise.resolve(_gracefulFs2.default.createWriteStream(filePath, options));
	};

	// Promise for mkdirp (3rd party module)
	cov_wmfg22soi.s[6]++;
	self.ensurePath = function (directoryPath) {
		cov_wmfg22soi.f[3]++;
		cov_wmfg22soi.s[7]++;

		debug('examining path %s', directoryPath);

		cov_wmfg22soi.s[8]++;
		return new Promise(function (resolve, reject) {
			cov_wmfg22soi.f[4]++;
			cov_wmfg22soi.s[9]++;

			if ((cov_wmfg22soi.b[1][0]++, typeof directoryPath !== 'string') || (cov_wmfg22soi.b[1][1]++, !directoryPath.length)) {
				cov_wmfg22soi.b[0][0]++;
				cov_wmfg22soi.s[10]++;

				debug('invalid path %s', directoryPath);

				cov_wmfg22soi.s[11]++;
				return reject(new Error('path is invalid'));
			} else {
				cov_wmfg22soi.b[0][1]++;
			}

			cov_wmfg22soi.s[12]++;
			return (0, _mkdirp2.default)(directoryPath, function (err) {
				cov_wmfg22soi.f[5]++;
				cov_wmfg22soi.s[13]++;

				if (err) {
					cov_wmfg22soi.b[2][0]++;
					cov_wmfg22soi.s[14]++;

					debug('an error occurred while creating the directory %s (error: %s)', directoryPath, err.message);

					cov_wmfg22soi.s[15]++;
					return reject(err);
				} else {
					cov_wmfg22soi.b[2][1]++;
				}
				cov_wmfg22soi.s[16]++;
				debug('successfully created path %s', directoryPath);

				cov_wmfg22soi.s[17]++;
				return resolve();
			});
		});
	};

	// Promise that wraps stat to determine true or false
	cov_wmfg22soi.s[18]++;
	self.exists = function (filePath) {
		cov_wmfg22soi.f[6]++;
		cov_wmfg22soi.s[19]++;

		debug('checking to see if file %s exists', filePath);

		cov_wmfg22soi.s[20]++;
		return new Promise(function (resolve) {
			cov_wmfg22soi.f[7]++;
			cov_wmfg22soi.s[21]++;

			return self.lstat(filePath).then(function () {
				cov_wmfg22soi.f[8]++;
				cov_wmfg22soi.s[22]++;
				return resolve(true);
			}).catch(function () {
				cov_wmfg22soi.f[9]++;
				cov_wmfg22soi.s[23]++;
				return resolve(false);
			});
		});
	};

	// Promise for fs.stat
	cov_wmfg22soi.s[24]++;
	self.lstat = _renege2.default.promisify(_gracefulFs2.default.lstat);

	// Promise to remove X number of least recent files matching pattern
	cov_wmfg22soi.s[25]++;
	self.prune = function () {
		var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(directoryPath, filter, retainCount) {
			var filePaths;
			return regeneratorRuntime.wrap(function _callee$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							cov_wmfg22soi.f[10]++;
							cov_wmfg22soi.s[26]++;

							debug('attempting to remove files at %s', directoryPath);

							cov_wmfg22soi.s[27]++;

							if (!((cov_wmfg22soi.b[4][0]++, typeof directoryPath !== 'string') || (cov_wmfg22soi.b[4][1]++, !directoryPath.length))) {
								_context.next = 12;
								break;
							}

							cov_wmfg22soi.b[3][0]++;
							cov_wmfg22soi.s[28]++;

							debug('invalid path %s', directoryPath);

							cov_wmfg22soi.s[29]++;
							throw new Error('path is invalid');

						case 12:
							cov_wmfg22soi.b[3][1]++;

						case 13:
							cov_wmfg22soi.s[30]++;

							if (!((cov_wmfg22soi.b[6][0]++, typeof retainCount !== 'number') || (cov_wmfg22soi.b[6][1]++, retainCount < 0))) {
								_context.next = 22;
								break;
							}

							cov_wmfg22soi.b[5][0]++;
							cov_wmfg22soi.s[31]++;

							debug('invalid retainCount passed');

							cov_wmfg22soi.s[32]++;
							throw new Error('retainCount is invalid');

						case 22:
							cov_wmfg22soi.b[5][1]++;

						case 23:
							cov_wmfg22soi.s[33]++;
							_context.next = 26;
							return self.readAndSort(directoryPath, { filter: { name: filter } });

						case 26:
							filePaths = _context.sent;
							cov_wmfg22soi.s[34]++;

							if (!(filePaths.length > retainCount)) {
								_context.next = 38;
								break;
							}

							cov_wmfg22soi.b[7][0]++;
							cov_wmfg22soi.s[35]++;

							debug('removing %d files', filePaths.length - retainCount);

							cov_wmfg22soi.s[36]++;
							_context.next = 35;
							return Promise.all(filePaths.slice(retainCount).map(function (filePath) {
								cov_wmfg22soi.f[11]++;
								cov_wmfg22soi.s[37]++;
								return self.unlink(filePath);
							}));

						case 35:
							return _context.abrupt('return', _context.sent);

						case 38:
							cov_wmfg22soi.b[7][1]++;

						case 39:
						case 'end':
							return _context.stop();
					}
				}
			}, _callee, undefined);
		}));

		return function (_x, _x2, _x3) {
			return _ref.apply(this, arguments);
		};
	}();

	// Promise for fs.readdir
	cov_wmfg22soi.s[38]++;
	self.readdir = _renege2.default.promisify(_gracefulFs2.default.readdir);

	cov_wmfg22soi.s[39]++;
	self.readlink = _renege2.default.promisify(_gracefulFs2.default.readlink);

	// Promise for fs.readdir that additional sorts files based on date
	cov_wmfg22soi.s[40]++;
	self.readAndSort = function () {
		var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(directoryPath, options) {
			var files, statPromises;
			return regeneratorRuntime.wrap(function _callee2$(_context2) {
				while (1) {
					switch (_context2.prev = _context2.next) {
						case 0:
							cov_wmfg22soi.f[12]++;
							cov_wmfg22soi.s[41]++;


							debug('sorting files based on date at %s', directoryPath);

							// ensure sort function is defined
							cov_wmfg22soi.s[42]++;
							options = (cov_wmfg22soi.b[8][0]++, options) || (cov_wmfg22soi.b[8][1]++, {});
							cov_wmfg22soi.s[43]++;
							options.sort = (cov_wmfg22soi.b[9][0]++, options.sort) || (cov_wmfg22soi.b[9][1]++, function (a, b) {
								cov_wmfg22soi.f[13]++;
								cov_wmfg22soi.s[44]++;
								return b.stats.mtime - a.stats.mtime;
							});

							// read file names from specified directory
							cov_wmfg22soi.s[45]++;
							_context2.next = 10;
							return self.readdir(directoryPath);

						case 10:
							files = _context2.sent;
							statPromises = void 0;
							cov_wmfg22soi.s[46]++;

							if (files.length) {
								_context2.next = 21;
								break;
							}

							cov_wmfg22soi.b[10][0]++;
							cov_wmfg22soi.s[47]++;

							debug('no files found at %s', directoryPath);

							cov_wmfg22soi.s[48]++;
							return _context2.abrupt('return', []);

						case 21:
							cov_wmfg22soi.b[10][1]++;

						case 22:
							cov_wmfg22soi.s[49]++;


							// filter if specified in options
							if ((cov_wmfg22soi.b[12][0]++, options.filter) && (cov_wmfg22soi.b[12][1]++, options.filter.name)) {
								cov_wmfg22soi.b[11][0]++;
								cov_wmfg22soi.s[50]++;

								files = files.filter(function (name) {
									cov_wmfg22soi.f[14]++;
									cov_wmfg22soi.s[51]++;
									return options.filter.name.test(name);
								});
							} else {
								cov_wmfg22soi.b[11][1]++;
							}

							// turn into a list of full paths
							cov_wmfg22soi.s[52]++;
							statPromises = files.map(function (name) {
								cov_wmfg22soi.f[15]++;
								cov_wmfg22soi.s[53]++;
								return _path2.default.join(directoryPath, name);
							}).map(function (filePath) {
								cov_wmfg22soi.f[16]++;
								cov_wmfg22soi.s[54]++;

								return new Promise(function (resolve, reject) {
									cov_wmfg22soi.f[17]++;
									cov_wmfg22soi.s[55]++;


									/* eslint object-shorthand:0 */
									return self.lstat(filePath).then(function (stats) {
										cov_wmfg22soi.f[18]++;
										cov_wmfg22soi.s[56]++;
										return resolve({
											path: filePath,
											stats: stats
										});
									}).catch(reject);
								});
							});

							cov_wmfg22soi.s[57]++;
							_context2.next = 29;
							return Promise.all(statPromises).then(function (fileStats) {
								cov_wmfg22soi.f[19]++;
								cov_wmfg22soi.s[58]++;

								// filter out links and files on type filter
								if ((cov_wmfg22soi.b[14][0]++, options.filter) && (cov_wmfg22soi.b[14][1]++, options.filter.type)) {
									cov_wmfg22soi.b[13][0]++;

									var typeFilter = (cov_wmfg22soi.s[59]++, options.filter.type);

									cov_wmfg22soi.s[60]++;
									fileStats = fileStats.filter(function (fileStat) {
										cov_wmfg22soi.f[20]++;

										var isLink = (cov_wmfg22soi.s[61]++, fileStat.stats.isSymbolicLink());

										// links filter is defined and this is a symbolic links, so filter it
										cov_wmfg22soi.s[62]++;
										if ((cov_wmfg22soi.b[16][0]++, typeFilter.links !== null) && (cov_wmfg22soi.b[16][1]++, isLink)) {
											cov_wmfg22soi.b[15][0]++;
											cov_wmfg22soi.s[63]++;

											return typeFilter.links;
										} else {
											cov_wmfg22soi.b[15][1]++;
										}

										// file filter is defined and this is a file, so filter it
										cov_wmfg22soi.s[64]++;
										if ((cov_wmfg22soi.b[18][0]++, typeFilter.files !== null) && (cov_wmfg22soi.b[18][1]++, !isLink)) {
											cov_wmfg22soi.b[17][0]++;
											cov_wmfg22soi.s[65]++;

											return typeFilter.files;
										} else {
											cov_wmfg22soi.b[17][1]++;
										}

										cov_wmfg22soi.s[66]++;
										return false;
									});
								} else {
									cov_wmfg22soi.b[13][1]++;
								}

								// filter out 0 length files (if specified)
								cov_wmfg22soi.s[67]++;
								if ((cov_wmfg22soi.b[20][0]++, options.filter) && (cov_wmfg22soi.b[20][1]++, options.filter.notEmpty)) {
									cov_wmfg22soi.b[19][0]++;
									cov_wmfg22soi.s[68]++;

									fileStats = fileStats.filter(function (fileStat) {
										cov_wmfg22soi.f[21]++;
										cov_wmfg22soi.s[69]++;
										return fileStat.stats.size > 0;
									});
								} else {
									cov_wmfg22soi.b[19][1]++;
								}

								// filter files and keep those newer than specified time
								cov_wmfg22soi.s[70]++;
								if ((cov_wmfg22soi.b[22][0]++, options.filter) && (cov_wmfg22soi.b[22][1]++, options.filter.modifiedAfter)) {
									cov_wmfg22soi.b[21][0]++;
									cov_wmfg22soi.s[71]++;

									fileStats = fileStats.filter(function (fileStat) {
										cov_wmfg22soi.f[22]++;
										cov_wmfg22soi.s[72]++;

										if (options.filter.modifiedAfter instanceof Date) {
											cov_wmfg22soi.b[23][0]++;
											cov_wmfg22soi.s[73]++;

											return fileStat.stats.mtime.getTime() >= options.filter.modifiedAfter.getTime();
										} else {
											cov_wmfg22soi.b[23][1]++;
										}

										var baseTime = (cov_wmfg22soi.s[74]++, Date.now() - options.filter.modifiedAfter);

										cov_wmfg22soi.s[75]++;
										return fileStat.stats.mtime >= baseTime;
									});
								} else {
									cov_wmfg22soi.b[21][1]++;
								}

								// filter files and keep those older than specified time
								cov_wmfg22soi.s[76]++;
								if ((cov_wmfg22soi.b[25][0]++, options.filter) && (cov_wmfg22soi.b[25][1]++, options.filter.modifiedBefore)) {
									cov_wmfg22soi.b[24][0]++;
									cov_wmfg22soi.s[77]++;

									fileStats = fileStats.filter(function (fileStat) {
										cov_wmfg22soi.f[23]++;
										cov_wmfg22soi.s[78]++;

										if (options.filter.modifiedBefore instanceof Date) {
											cov_wmfg22soi.b[26][0]++;
											cov_wmfg22soi.s[79]++;

											return fileStat.stats.mtime.getTime() <= options.filter.modifiedBefore.getTime();
										} else {
											cov_wmfg22soi.b[26][1]++;
										}

										var baseTime = (cov_wmfg22soi.s[80]++, Date.now() - options.filter.modifiedBefore);

										cov_wmfg22soi.s[81]++;
										return fileStat.stats.mtime <= baseTime;
									});
								} else {
									cov_wmfg22soi.b[24][1]++;
								}

								// sort based on input
								cov_wmfg22soi.s[82]++;
								fileStats = fileStats.sort(options.sort);

								// return an array of file paths
								cov_wmfg22soi.s[83]++;
								debug('successfully sorted files');

								cov_wmfg22soi.s[84]++;
								return Promise.resolve(fileStats.map(function (fileStat) {
									cov_wmfg22soi.f[24]++;
									cov_wmfg22soi.s[85]++;
									return fileStat.path;
								}));
							});

						case 29:
							return _context2.abrupt('return', _context2.sent);

						case 30:
						case 'end':
							return _context2.stop();
					}
				}
			}, _callee2, undefined);
		}));

		return function (_x4, _x5) {
			return _ref2.apply(this, arguments);
		};
	}();

	// Promise for fs.createReadStream
	cov_wmfg22soi.s[86]++;
	self.readFile = function (filePath, options) {
		cov_wmfg22soi.f[25]++;
		cov_wmfg22soi.s[87]++;

		debug('attempting to read file at %s', filePath);

		cov_wmfg22soi.s[88]++;
		return new Promise(function (resolve, reject) {
			cov_wmfg22soi.f[26]++;

			var chunks = (cov_wmfg22soi.s[89]++, []),
			    reader = (cov_wmfg22soi.s[90]++, _gracefulFs2.default.createReadStream(filePath, options));

			// capture events
			cov_wmfg22soi.s[91]++;
			reader.on('data', function (chunk) {
				cov_wmfg22soi.f[27]++;
				cov_wmfg22soi.s[92]++;
				return chunks.push(chunk);
			});
			cov_wmfg22soi.s[93]++;
			reader.on('end', function () {
				cov_wmfg22soi.f[28]++;
				cov_wmfg22soi.s[94]++;
				return resolve(chunks.join(''));
			});
			cov_wmfg22soi.s[95]++;
			reader.on('error', reject);
		});
	};

	cov_wmfg22soi.s[96]++;
	self.realpath = _renege2.default.promisify(_gracefulFs2.default.realpath);

	// Promise for fs.rename
	cov_wmfg22soi.s[97]++;
	self.rename = _renege2.default.promisify(_gracefulFs2.default.rename);

	// Promise for fs.stat
	cov_wmfg22soi.s[98]++;
	self.stat = _renege2.default.promisify(_gracefulFs2.default.stat);

	cov_wmfg22soi.s[99]++;
	self.symlink = _renege2.default.promisify(_gracefulFs2.default.symlink);

	// wrapper for self.writeFile that will always resolve
	cov_wmfg22soi.s[100]++;
	self.tryWriteFile = function (filePath, data, options) {
		cov_wmfg22soi.f[29]++;
		cov_wmfg22soi.s[101]++;

		debug('attempting to write file at %s', filePath);

		cov_wmfg22soi.s[102]++;
		return new Promise(function (resolve) {
			cov_wmfg22soi.f[30]++;
			cov_wmfg22soi.s[103]++;

			return self.writeFile(filePath, data, options).then(function () {
				cov_wmfg22soi.f[31]++;
				cov_wmfg22soi.s[104]++;
				return resolve();
			}).catch(function (err) {
				cov_wmfg22soi.f[32]++;
				cov_wmfg22soi.s[105]++;
				return resolve({ err: err });
			});
		});
	};

	// Promise for fs.unlink
	cov_wmfg22soi.s[106]++;
	self.unlink = _renege2.default.promisify(_gracefulFs2.default.unlink);

	// Promise for fs.createWriteStream
	cov_wmfg22soi.s[107]++;
	self.writeFile = function (filePath, data, options) {
		cov_wmfg22soi.f[33]++;
		cov_wmfg22soi.s[108]++;

		debug('attempting to write file at %s', filePath);

		cov_wmfg22soi.s[109]++;
		return new Promise(function (resolve, reject) {
			cov_wmfg22soi.f[34]++;

			var writer = (cov_wmfg22soi.s[110]++, _gracefulFs2.default.createWriteStream(filePath, options));

			// capture events
			cov_wmfg22soi.s[111]++;
			writer.on('error', reject);
			cov_wmfg22soi.s[112]++;
			writer.on('finish', resolve);

			// write data
			cov_wmfg22soi.s[113]++;
			writer.end(data);
		});
	};

	cov_wmfg22soi.s[114]++;
	return self;
}({});
//# sourceMappingURL=index.js.map
