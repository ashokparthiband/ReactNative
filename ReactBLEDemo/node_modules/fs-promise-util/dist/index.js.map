{"version":3,"sources":["index.js"],"names":["debug","self","appendFile","promisify","createReadStream","filePath","options","Promise","resolve","createWriteStream","ensurePath","directoryPath","reject","length","Error","err","message","exists","lstat","then","catch","prune","filter","retainCount","readAndSort","name","filePaths","all","slice","map","unlink","readdir","readlink","sort","a","b","stats","mtime","files","statPromises","test","join","path","fileStats","type","typeFilter","fileStat","isLink","isSymbolicLink","links","notEmpty","size","modifiedAfter","Date","getTime","baseTime","now","modifiedBefore","readFile","chunks","reader","on","chunk","push","realpath","rename","stat","symlink","tryWriteFile","data","writeFile","writer","end"],"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","file":"index.js","sourcesContent":["import 'babel-polyfill';\nimport 'source-map-support/register';\n\nimport debugLog from 'debug';\nimport fs from 'graceful-fs';\nimport mkdirp from 'mkdirp';\nimport path from 'path';\nimport renege from 'renege';\n\nconst debug = debugLog('fs-promise-util');\n\nexport default ((self) => {\n\t// Promise for fs.appendFile\n\tself.appendFile = renege.promisify(fs.appendFile);\n\n\tself.createReadStream = (filePath, options) => {\n\t\treturn Promise.resolve(fs.createReadStream(filePath, options));\n\t};\n\n\tself.createWriteStream = (filePath, options) => {\n\t\treturn Promise.resolve(fs.createWriteStream(filePath, options));\n\t};\n\n\t// Promise for mkdirp (3rd party module)\n\tself.ensurePath = (directoryPath) => {\n\t\tdebug('examining path %s', directoryPath);\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (typeof directoryPath !== 'string' || !directoryPath.length) {\n\t\t\t\tdebug('invalid path %s', directoryPath);\n\n\t\t\t\treturn reject(new Error('path is invalid'));\n\t\t\t}\n\n\t\t\treturn mkdirp(directoryPath, (err) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tdebug('an error occurred while creating the directory %s (error: %s)',\n\t\t\t\t\t\tdirectoryPath, err.message);\n\n\t\t\t\t\treturn reject(err);\n\t\t\t\t}\n\t\t\t\tdebug('successfully created path %s', directoryPath);\n\n\t\t\t\treturn resolve();\n\t\t\t});\n\t\t});\n\t};\n\n\t// Promise that wraps stat to determine true or false\n\tself.exists = (filePath) => {\n\t\tdebug('checking to see if file %s exists', filePath);\n\n\t\treturn new Promise((resolve) => {\n\t\t\treturn self\n\t\t\t\t.lstat(filePath)\n\t\t\t\t.then(() => resolve(true))\n\t\t\t\t.catch(() => resolve(false));\n\t\t});\n\t};\n\n\t// Promise for fs.stat\n\tself.lstat = renege.promisify(fs.lstat);\n\n\t// Promise to remove X number of least recent files matching pattern\n\tself.prune = async (directoryPath, filter, retainCount) => {\n\t\tdebug('attempting to remove files at %s',\n\t\t\tdirectoryPath);\n\n\t\tif (typeof directoryPath !== 'string' || !directoryPath.length) {\n\t\t\tdebug('invalid path %s', directoryPath);\n\n\t\t\tthrow new Error('path is invalid');\n\t\t}\n\n\t\tif (typeof retainCount !== 'number' || retainCount < 0) {\n\t\t\tdebug('invalid retainCount passed');\n\n\t\t\tthrow new Error('retainCount is invalid');\n\t\t}\n\n\t\tlet filePaths = await self.readAndSort(\n\t\t\tdirectoryPath,\n\t\t\t{ filter : { name : filter } });\n\n\t\tif (filePaths.length > retainCount) {\n\t\t\tdebug('removing %d files', (filePaths.length - retainCount));\n\n\t\t\treturn await Promise.all(\n\t\t\t\tfilePaths\n\t\t\t\t\t.slice(retainCount)\n\t\t\t\t\t.map((filePath) => self.unlink(filePath)));\n\t\t}\n\t};\n\n\t// Promise for fs.readdir\n\tself.readdir = renege.promisify(fs.readdir);\n\n\tself.readlink = renege.promisify(fs.readlink);\n\n\t// Promise for fs.readdir that additional sorts files based on date\n\tself.readAndSort = async (directoryPath, options) => {\n\n\t\tdebug('sorting files based on date at %s', directoryPath);\n\n\t\t// ensure sort function is defined\n\t\toptions = options || {};\n\t\toptions.sort = (options.sort || ((a, b) => b.stats.mtime - a.stats.mtime));\n\n\t\t// read file names from specified directory\n\t\tlet\n\t\t\tfiles = await self.readdir(directoryPath),\n\t\t\tstatPromises;\n\n\t\t// no files? no need to move down further\n\t\tif (!files.length) {\n\t\t\tdebug('no files found at %s', directoryPath);\n\n\t\t\treturn [];\n\t\t}\n\n\t\t// filter if specified in options\n\t\tif (options.filter && options.filter.name) {\n\t\t\tfiles = files.filter((name) => options.filter.name.test(name));\n\t\t}\n\n\t\t// turn into a list of full paths\n\t\tstatPromises = files\n\t\t\t.map((name) => path.join(directoryPath, name))\n\t\t\t.map((filePath) => {\n\t\t\t\treturn new Promise((resolve, reject) => {\n\n\t\t\t\t\t/* eslint object-shorthand:0 */\n\t\t\t\t\treturn self.lstat(filePath)\n\t\t\t\t\t\t.then((stats) =>\n\t\t\t\t\t\t\tresolve({\n\t\t\t\t\t\t\t\tpath : filePath,\n\t\t\t\t\t\t\t\tstats : stats\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.catch(reject);\n\t\t\t\t});\n\t\t\t});\n\n\t\treturn await Promise\n\t\t\t.all(statPromises)\n\t\t\t.then((fileStats) => {\n\t\t\t\t// filter out links and files on type filter\n\t\t\t\tif (options.filter && options.filter.type) {\n\t\t\t\t\tlet typeFilter = options.filter.type;\n\n\t\t\t\t\tfileStats = fileStats.filter((fileStat) => {\n\t\t\t\t\t\tlet isLink = fileStat.stats.isSymbolicLink();\n\n\t\t\t\t\t\t// links filter is defined and this is a symbolic links, so filter it\n\t\t\t\t\t\tif (typeFilter.links !== null && isLink) {\n\t\t\t\t\t\t\treturn typeFilter.links;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// file filter is defined and this is a file, so filter it\n\t\t\t\t\t\tif (typeFilter.files !== null && !isLink) {\n\t\t\t\t\t\t\treturn typeFilter.files;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// filter out 0 length files (if specified)\n\t\t\t\tif (options.filter && options.filter.notEmpty) {\n\t\t\t\t\tfileStats = fileStats.filter((fileStat) => fileStat.stats.size > 0);\n\t\t\t\t}\n\n\t\t\t\t// filter files and keep those newer than specified time\n\t\t\t\tif (options.filter && options.filter.modifiedAfter) {\n\t\t\t\t\tfileStats = fileStats.filter((fileStat) => {\n\t\t\t\t\t\tif (options.filter.modifiedAfter instanceof Date) {\n\t\t\t\t\t\t\treturn fileStat.stats.mtime.getTime() >= options.filter.modifiedAfter.getTime();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet baseTime = Date.now() - options.filter.modifiedAfter;\n\n\t\t\t\t\t\treturn fileStat.stats.mtime >= baseTime;\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// filter files and keep those older than specified time\n\t\t\t\tif (options.filter && options.filter.modifiedBefore) {\n\t\t\t\t\tfileStats = fileStats.filter((fileStat) => {\n\t\t\t\t\t\tif (options.filter.modifiedBefore instanceof Date) {\n\t\t\t\t\t\t\treturn fileStat.stats.mtime.getTime() <= options.filter.modifiedBefore.getTime();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet baseTime = Date.now() - options.filter.modifiedBefore;\n\n\t\t\t\t\t\treturn fileStat.stats.mtime <= baseTime;\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// sort based on input\n\t\t\t\tfileStats = fileStats.sort(options.sort);\n\n\t\t\t\t// return an array of file paths\n\t\t\t\tdebug('successfully sorted files');\n\n\t\t\t\treturn Promise.resolve(fileStats.map((fileStat) => fileStat.path));\n\t\t\t});\n\t};\n\n\t// Promise for fs.createReadStream\n\tself.readFile = (filePath, options) => {\n\t\tdebug('attempting to read file at %s', filePath);\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tlet\n\t\t\t\tchunks = [],\n\t\t\t\treader = fs.createReadStream(filePath, options);\n\n\t\t\t// capture events\n\t\t\treader.on('data', (chunk) => chunks.push(chunk));\n\t\t\treader.on('end', () => resolve(chunks.join('')));\n\t\t\treader.on('error', reject);\n\t\t});\n\t};\n\n\tself.realpath = renege.promisify(fs.realpath);\n\n\t// Promise for fs.rename\n\tself.rename = renege.promisify(fs.rename);\n\n\t// Promise for fs.stat\n\tself.stat = renege.promisify(fs.stat);\n\n\tself.symlink = renege.promisify(fs.symlink);\n\n\t// wrapper for self.writeFile that will always resolve\n\tself.tryWriteFile = (filePath, data, options) => {\n\t\tdebug('attempting to write file at %s', filePath);\n\n\t\treturn new Promise((resolve) => {\n\t\t\treturn self\n\t\t\t\t.writeFile(filePath, data, options)\n\t\t\t\t.then(() => resolve())\n\t\t\t\t.catch((err) => resolve({ err }));\n\t\t});\n\t};\n\n\t// Promise for fs.unlink\n\tself.unlink = renege.promisify(fs.unlink);\n\n\t// Promise for fs.createWriteStream\n\tself.writeFile = (filePath, data, options) => {\n\t\tdebug('attempting to write file at %s', filePath);\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tlet writer = fs.createWriteStream(filePath, options);\n\n\t\t\t// capture events\n\t\t\twriter.on('error', reject);\n\t\t\twriter.on('finish', resolve);\n\n\t\t\t// write data\n\t\t\twriter.end(data);\n\t\t});\n\t};\n\n\treturn self;\n})({});\n"]}